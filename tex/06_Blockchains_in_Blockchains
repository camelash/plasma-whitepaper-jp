\section{ブロックチェーンの中にあるブロックチェーン}

すでに説明したように、Plasmaのコアの設計は計算処理をスケールさせるためのものである。しかし我々は不正証明を発行したり、ブロックスペースの可用性を確保するためにblock withholding問題と争わねばならない。Plasmaにおけるblock withholdingへの解決策は、チェーンの停止やwithholdingに対して大量exitを実行できるシステムである。
しかし大量exitトランザクションは特にもしUTXOたちの数が多くそのbitmapが発行されねばならないとき非常に高価だ。加えて、単一のexitだけを実行する方が望ましい。大量引き出しトランザクションは多数の参加者を巻き込んだ複雑な相互ゲームを要求する。最後の手段として用いるべきだ。
代わりに、状態を証明するための存在できる高次と低次の法廷を用意した。当事者はルートチェーンを上級法廷としてみることができ、それは下級法廷すべての代表である。彼らの法廷での力を可能にするのはルートチェーンの法である。これは法廷にスケーラビリティを与え、下級法廷の状態が異議申し立てか停止に陥ったとき、これらはより法廷を代表できる上級法廷に移動する必要がある。状態の検証の高級法廷へのブロードキャストは常に可能だが、それは高くつくだろう。

全ての状態はマークル化されていて、ルートチェーンにコミットされる。もっとも楽観的なケースではブロックヘッダが直接親チェーンに発行されて、親チェーンはそれをさらに親に伝え、ルートチェーンに届くまで続ける。ブロックヘッダの中身はマークル化された親チェーンのブロックに対するコミットだ。
トランザクションはPlasmaチェーンやなんらかの親のPlasmaチェーン、あるいはルートチェーンにに提出される。その目的はfungibilityと検閲耐性を保証するためだ。特に、チェーンの停止やブロックの非開示のイベントでは、ユーザーはまだ資金を引き出しうる。
ブロックのコミットが提出された時、それが承認される前にルートチェーンに一定の量のconfirmationが承認されるのを待たねばならない。その間、不正証明がルートチェーンと中間Plasmaチェーンに提出されるかもしれない（それはブロックルートを通してルートチェーンにコミットされる）。
どの個別のPlasmaチェーンもPlasmaブロックにバンドルされたコミットのステートマシンを実行している。個々のPlasmaチェーンは子Plasmaチェーンの詳細を詮索するかもしれないし、しないかもしれない。

代わりに、彼らは確認されたPlasmaチェーンの残高を持っている。子Plasmaチェーンが自身の状態を更新した時、彼らはPlasmaブロックヘッダのハッシュをどれかの親に提出する。
これは特定のブロックステートは複数の親チェーンに提出されうることを示唆している。複製イベント中、それは不正にはならないかもしれない（しかしアプリケーションに依存した特定のコンセンサスの状態においてペナルティを受けうる）。一方で、もし状態のごまかし、例えば親1にコミットされた状態が親2と異なるなどがあった場合、Plasmaチェーンへの供託者は彼らのデポジットを失う。

新たな子の状態更新は以下の彼らの状態更新メッセージを使うだろう：支払われた手数料（そして通貨単位）、コミットされたルートブロックハッシュ、前のブロックは種、コミットする親ブロックハッシュ、デポジット証明、引き出し証明など。
親チェーンになにがコミットされていようが、子チェーンは再帰的な全ての親のそれらのデータを観測している。kれはそれがコミットするはずのそれが持つ証明は、ごまかされも二重支払いトランザクションもされていない（し、それゆえにトランザクションをごまかしのイベント中でslashにさらしている）。
ごまかしのイベント中で、親チェーンの状態は常に優先される。インセンティブは彼らをしるあらゆる当事者によってごまかしの開示を作る。
デポジットと引き出しはPlasmaと親チェーン両方で可能である。

引き出しはPlasmaチェーンの間で十分な流動性と他の当事者が喜んで着資金をどこか他の場所に置く条件で可能である。これはクロスチェーンのアトミックスワップを通してなされえる。
もし誰かがメインチェーンを使ってクリアしたいと願ったとき、HTLCのチェーン間のオンチェーンライトニングペイメントのように実装するのは可能である。
すべての不正証明はマークル化されたチェーンコミットの証明を提供しなければならない。偽の証明は特定の詐欺ブロックに責任のあるPlasmaチェーンをペナルティする。
初めのデザインの複雑性は検閲耐性に関する複数の親チェーン間のトランザクション状態のブロードキャストである。早期のイテレーションは状態遷移やトランザクションが個々のPlasmaチェーンの中だけで実行されていると推測でき、他のチェーンとのインタラクションはコミットされた親/子チェーンへのmessage passingとデポジット・引き出しだけである（訳注：Shard間通信のないごくシンプルなShardingということ）。その方法では、初期においては、デポジットと引き出しの証明絡みの部分だけが複雑な程度である。
データのコミットは取り込み証明の一部分として推測される。
 
\subsection{チェーン内で資金を受け取る}
 
ブロックチェーン群の中のこの階層的なフレームワークでは、AliceがPlasmaチェーンの中でBobに資金を送ろうとする場合、次のような処理が行われる。
 
3つの深いレベル：        	
 
\begin{enumerate}
\item アリスはボブに資金を送ろうとしていることをボブと調整する。AliceはBobに、Bobが資金を受け取るPlasmaチェーンを開示する。支払いを受け取るため、ボブは特別に、彼が資金を受け取るつもりであるルートチェーン上のスマートコントラクトを確認する必要がある。（スマートコントラクトの契約コード/メカニズム、許容可能なconsensus exit delaysなど）
\item 確認した結果、支払いに問題なければ、彼らは支払い条件を定義するステートメントに事前署名するが、多くの場合、十分な成熟度を持つブロックチェーンにブロックを含めることにより支払いの証拠となるが、状況次第では、pay\-to\-contract\-hashにすることもできる。これはオンチェーンではなく、単に他人に証明するための決済の条件を付け加えるだけだ。
\item AliceはPlasmaチェーン内で支払いを行いる。ブロックはバリデータによって承認され、そしてブロックヘッダーへのコミットメントは親チェーンのブロック内に公開される。マークライズ化された子Plasmaチェーンへのコミットメントはすべての親チェーンのブロックに含まれ、最終的にルートブロックチェーンに含まれる。
\item Bobはルートブロックチェーンと完全に同期し、資金が入っているチェーンとその親のいくつかを検証するBobは、彼の資金が含まれていない他のPlasmaチェーンを検証する必要はありません。最悪の場合は、ボブはアリスが十分な成熟度をもつPlasmaチェーンで支払いを行ったことを完全に検証することができる。
\end{enumerate}
 
しかし、迅速な最終決定が求められる場合、アリスは新しいブロックで支払われた支払いを承認することができる（Plasmaチェーン内での支払い受け取りについては、以前の定義を参照してください）。
 
アリスが支払いを承認して、ボブがそれを受け入れるなら（彼は出金を証明することができるので）、最終的に支払いは達成されたと見なされる。 BobはこのPlasmaチェーンから資金を引き出すことができる。
 
この設計の重要な側面は、子ブロックチェーンの検証に全責任を負うということだ。
BobがPlasmaチェーンとすべての親を検証しない場合（最終的には
ルートチェーンへの定期的なコミットメントが公開されている）、それが達成されたものとして扱われるべきではありません。Lightning Networkの構築と同様に、Bobは他のPlasmaブロックチェーンで何が起こるかを気にする必要はありません。
彼は彼にとって重要なチェーンの正確さだけを観察する。
彼はコインを使用する能力を持っているとき、彼はそれらを使うことができると確信している。
 
\subsection{親チェーンから資金を受け取る}
親チェーンから資金を受け取ることは、ルートブロックチェーンからのデポジットに似ている。
唯一の違いは、受信者がすべての親プラズマ・チェーン（単にプラズマ・チェーン自体ではなく）を検証する必要があるということだ。 子プラズマチェーンへの入金は速いだ。
  
\subsection{ツリーからウェブへ} 
上記の説明は単一の親チェーンに関するものだが、プラズマチェーンは複数のルートブロックチェーンを監視することが可能だ。
これにより、子チェーンとのバランスを更新することができる。
ある親の障害がすぐにすべての参加者によって認識されない可能性があるため、注意を払う必要があり、cascading systemic failuresはtime\-delaysとクロスチェーン流動性の推定を最小化することにより、緩和される必要がある
このための正しい構成は未解決の問題だ。
 
 
 
\subsection{ブロック源泉徴収問題の緩和}
出金トランザクションをブロードキャストすることができる多くのvenuesを作ることにより、停止しているか、ブロックを保留しているチェーンから出る可能性のある多くの場を存在させることができる。
 
子チェーンが失敗した場合、ルートチェインでトランザクションが高価になっても、親チェーンで個々の単純な終了を処理できる。
これにより、親プラズマ・チェーンの1つが正しく動作していることが保証されていれば、Plasmaチェーン上のマイクロ・ペイメント・アウトプットを保持する際にある程度の信頼感を持たせることができる。
このゴールは、第一の動機であり、cascading failuresの影響を緩和する。
  
十分に大きな出力バランスが保持されており、有効な時間がない場合には、有効な引受を行う必要はありませんが、一つのlow\-value output（取引手数料の支払いが効果になってしまう場合）を保有している場合は、親のPlasmaチェーンの1つが有効であるという、ある程度の裏付けが必要だ。
より大きな裏付けが欲しい場合は、各レベルで各Plasmaチェーンを実行する多くの独立した当事者が深くネストされたチェーンを実行できる。
このようにすると、いくつかのトレードオフが存在するが、特定のプラズマチェーンがビザンチンになるように、誰もが新しいチェーンにmass\-withdraｗlする必要がある。
ビザンチンではない親がいる場合だが、親がビザンチンチェーンのコミットメントを処理することを拒否した場合は、別のチェーンへの迅速な移行と操作を継続することが可能だ。
 
 
これには、子チェーンが失敗した場合のプロセストランザクション以外の処理を行わないサービスが発生する可能性がある。
 
このサービスのオペレータは、子チェーンが失敗しない限り、何もする必要はありません（障害が発生するまで仮想的にサーバをオフにできるだけの十分な受動的なポイントまで、ブロックヘッダは自動的にそれらをスキップして パッシブオペレータの上のレベルにチェーンする）。
親チェーンでは非常に高いトランザクション量（ブロックサイズ/ガス制限）を持つことができるため、親チェーンの引き出しの多くは、一括引き出しの代わりに単純な引き出しになると予想している。
 
 
 
\subsection{Exit処理}
親チェーンまたはルートチェーンにMass exitsが可能だ。
子チェーンがビザンチンの動作を開始した場合、ネストされた親チェーンがないPlasmaチェーンと同じく、どのステートも無効であると推測される。
同様に、Mass exitsは、ビザンチン親チェーンから迅速に抜け出す方法だ。
親チェーン（または子チェーン自体）をその親またはルートチェーンにスキップすることは可能だ。
 
 デザインは複雑なように見えるかもしれませんが、いくつかのチェーンがビザンチンであれば、そのすべての子チェーンが行動しなければならないということだ。
ハートビートを介して、整合なしに抜け出す最適化がある。（出口はユーザ側での署名なしに取り消すことができるのがデフォルトで、プラズマチェーン自体がそれを受け取ったというコミットメントをしているが、時期尚早の最適化である可能性がある）
 
 
この設計は基本的にsimple exitまたはmass exitと同じだが、ネストされたチェーンをサポートするためにデザインに若干の変更がある。
出口は重複することがあるが、親チェーンの出口は常に優先される。
親チェーンがビザンチンの動作を開始すると、出口もルートチェーンでコミットできる。
 （ビザンチンプラズマチェーンであると認識される）親/ルートチェーンの複製された出口の状態を反映および更新し、複製された出口をそれ自身の鎖で取り消すのは、その責任だ。
しかし、そうしなければ、ユーザーの資金はルートチェーン上で利用できるようになる。
 
 
 
親がビザンチンであるが、資金を保有している子チェーンが正しく動作している場合、複雑なmass exit transactionを避けることができる。
 
参加者は資金を送付するための新しいチェーンを見つけ、流動性プロバイダーがこの子チェーンで資金を受け取れるように簡単なexitを行い、他のユーザーは新しいチェーン（ビザンチンの親なし）で資金を受け取る。 子チェーンブロックのコミットメントは、ルートチェーンまたは上位レベルの親に公開される（ビザンチンノードを避ける）。
ユーザーはすぐに新しいチェーンに資金をもち、流動性提供者は親または最も高い親に後で資金を出す。
これは、新しい資金が新しいチェーンに迅速に配分され、exitが急速に行われることを目的としている。
 
 
\subsection{スケーラビリティ} 
これにより、UTXOのビットマップスケーラビリティが可能になる。ビットマップが大きくなりすぎると、ビットマップを複数の子チェーンに分割するだけで済む。
子チェーンへは、出力の代わりにブロック高さnonces（および候補チェーンヒント）を持つ口座残高として表されると推定される。
同様に、UTXOの代わりにアカウントを使用することを選り好むステートでは、簡単な引き出しをサポートするだけのトレードオフも可能だ。
最終的な結果は、ユーザーにとって大きなスケーラビリティだ。 彼らは、彼らの資金が保持されているプラズマチェーン（その親チェーン）を観察するだけでよい。 これは、自分自身に影響を与えるデータセットの検証を効果的に分担することができる。



